apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ name }}
    apb_name: '{{ apb_name }}'
    apb_plan_id: '{{ _apb_plan_id }}'
    apb_service_class_id: '{{ _apb_service_class_id }}'
    apb_service_instance_id: '{{ _apb_service_instance_id }}'
    component: {{ component }}
    nuxeo_type: {{ item.nuxeo_type }}
  namespace: {{ namespace }}
  name: {{ item.dc_name }}
spec:
{% if deploymentStrategy is defined and (deploymentStrategy | from_yaml) %}
  strategy:
{{ deploymentStrategy | from_yaml | to_nice_yaml(indent=2) | indent(4, true) }}
{% endif %}
  replicas: {{ item.replicas }}
  selector:
    app: {{ name }}
    component: nuxeo
    nuxeo_type: {{ item.nuxeo_type }}
    deploymentconfig: {{ name }}-{{ item.nuxeo_type }}

  template:
    metadata:
      labels:
        app: {{ name }}
        component: nuxeo
        nuxeo_type: {{ item.nuxeo_type }}
        deploymentconfig: {{ name }}-{{ item.nuxeo_type }}
{% if podAnnotations is defined and (podAnnotations | from_yaml) %}
      annotations:
{{ podAnnotations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
    spec:
{% if securityContext is defined and (securityContext | from_yaml) %}
      securityContext:
{{ securityContext | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}

    spec:
      initContainers:
      - image: 'nuxeo/nuxeo-init-container:latest'
        imagePullPolicy: Always
        name: bind
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nuxeo/conf.d
          name: nuxeoconfd
{% if useExternalMongoDB %}
        - name: mongodb-credentials
          mountPath: /opt/nuxeo/bindings/mongodb
{% endif %}
{% if useExternalElasticsearch %}
        - name: elasticsearch-credentials
          mountPath: /opt/nuxeo/bindings/elasticsearch
{% endif %}
{% if useKafkaForStream %}
        - name: kafka-credentials
          mountPath: /opt/nuxeo/bindings/kafka
{% endif %}
{% if useMinioForBinaries %}
        - name: minio-credentials
          mountPath: /opt/nuxeo/bindings/s3
{% endif %}
{% if useCustomBindings %}
        - name: custom-bindings
          mountPath: /opt/nuxeo/bindings/custom
{% endif %}
{% if nuxeo_clustering_enabled %}
        env:
        - name: NUXEO_CLUSTERING
          value: 'true'
        - name: NUXEO_URL
          value: https://{{ applicationUrl }}/nuxeo
        - name: NUXEO_NODE_ID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
{% endif %}
      containers:
{% if use_front_ssl_proxy and item.nuxeo_type == "portal" %}
      - name: nginx
        # TODO Bake a nuxeo image and allow parametrization
        image: nginx
        volumeMounts:
        - name: nginx-cert
          readOnly: true
          mountPath: "/etc/secrets/"
        - name: nginx-conf
          readOnly: true
          mountPath: "/etc/nginx/"
        - name: nginx-cache
          mountPath: "/var/cache/nginx"
        - name: nginx-tmp
          mountPath: "/var/tmp"
        ports:
        - containerPort: 8443
          protocol: TCP
{% endif %}
      - image: {{ image_repository }}:{{ image_tag }}
        imagePullPolicy: {{ image_pullPolicy }}
        livenessProbe:
          httpGet:
            path: /nuxeo/runningstatus
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ livenessProbe_initialDelaySeconds }}
          timeoutSeconds: {{ livenessProbe_timeoutSeconds }}
          failureThreshold: {{ livenessProbe_failureThreshold }}
          periodSeconds: {{ livenessProbe_periodSeconds }}
          successThreshold: {{ livenessProbe_successThreshold }}
        readinessProbe:
          httpGet:
            path: /nuxeo/runningstatus
            port: 8080
            scheme: HTTP
          initialDelaySeconds: {{ readinessProbe_initialDelaySeconds }}
          timeoutSeconds: {{ readinessProbe_timeoutSeconds }}
          failureThreshold: {{ readinessProbe_failureThreshold }}
          periodSeconds: {{ readinessProbe_periodSeconds }}
          successThreshold: {{ readinessProbe_successThreshold }}
        name: nuxeo
        env:
        - name: NUXEO_URL
          value: https://{{ applicationUrl }}/nuxeo
{% if connect_enabled %}
        - name: NUXEO_CLID
          valueFrom:
            secretKeyRef:
              key: 'instance.clid'
              name: {{ connect_secret_name }}
{% endif %}
{% if item.nuxeoEnvironment is defined and item.nuxeoEnvironment != "" %}
        - name: NUXEO_ENVIRONMENT
          value: {{ item.nuxeoEnvironment }}
{% endif %}
{% if item.nuxeoProfiles is defined and item.nuxeoProfiles != "" %}
        - name: NUXEO_PROFILES
          value: {{ item.nuxeoProfiles }}
{% endif %}
{% if nuxeoJavaOpts is defined and nuxeoJavaOpts != "" %}
        - name: JAVA_OPTS
          value: "{{ nuxeoJavaOpts }}"
{% endif %}
{% if binaries_persistentVolume_enabled %}
        - name: NUXEO_BINARY_STORE
          value: /var/lib/nuxeo/binaries/binaries
{% endif %}
{% if transientstore_persistentVolume_enabled %}
        - name: NUXEO_TRANSIENT_STORE
          value: /var/lib/nuxeo/transientstore
{% endif %}
{% if extraVars is defined and (extraVars | from_yaml) %}
{{ extraVars | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
        # TODO add params base on defined backends (Mongo, ES, Kafka)
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
{% if resources is defined and (resources | from_yaml) %}
{{ resources | from_yaml | to_nice_yaml(indent=2) | indent(10, true) }}
{% endif %}
        volumeMounts:
        - name: logs
          mountPath: /var/log/nuxeo
        - name: data
          mountPath: /var/lib/nuxeo/data
        - name: nuxeotmp
          mountPath: /opt/nuxeo/server/tmp
        - name: nuxeoconfd
          mountPath: /etc/nuxeo/conf.d
{% if binaries_persistentVolume_enabled %}
        - name: binaries
          mountPath: /var/lib/nuxeo/binaries
{% endif %}
{% if transientstore_persistentVolume_enabled %}
        - name: transientstore
          mountPath: /var/lib/nuxeo/transientstore
{% endif %}
      volumes:
      - name: nuxeoconfd
        emptyDir: {}
      - name: nuxeotmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: data
{% if data_persistentVolume_enabled %}
        persistentVolumeClaim:
          claimName: {{ data_pvc_name }}
{% else %}
        emptyDir: {}
{% endif %}
{% if binaries_persistentVolume_enabled %}
      - name: binaries
        persistentVolumeClaim:
          claimName: {{ binaries_pvc_name }}
{% endif %}
{% if transientstore_persistentVolume_enabled %}
      - name: transientstore
        persistentVolumeClaim:
          claimName: {{ transientstore_pvc_name }}
{% endif %}
{% if useExternalMongoDB %}
      - name: mongodb-credentials
        secret:
          secretName: {{ mongodb_credentials_name }}
{% endif %}
{% if useExternalElasticsearch %}
      - name: elasticsearch-credentials
        secret:
          secretName: {{ elasticsearch_credentials_name }}
{% endif %}
{% if useKafkaForStream %}
      - name: kafka-credentials
        secret:
          secretName: {{ kafka_credentials_name }}
{% endif %}
{% if useMinioForBinaries %}
      - name: minio-credentials
        secret:
          secretName: {{ minio_credentials_name }}
{% endif %}
{% if useCustomBindings %}
      - name: custom-bindings
        configMap:
          name: {{ custom_bindings_name }}
{% endif %}
{% if use_front_ssl_proxy and item.nuxeo_type == "portal" %}
      - name: nginx-conf
        configMap:
          name: {{ nginx_configmap_name }}
      - name: nginx-cert
        secret:
          secretName: {{ nginx_secret_name}}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-tmp
        emptyDir: {}
{% endif %}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
  - type: ConfigChange